import sys
sys.path.insert(0, '../CRYPTO_SVYZKI')
from keyboards.setting_arbit  import change_metod
import ast
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery
from aiogram.types import Message
from keyboards.setting_arbit import get_menu_black , get_ban_token
import random
#==================================================
from loader import bot, dp , db
#==================================================

@dp.callback_query_handler(text_contains="arbit_metod",state="*")
async def add_otvet(query: CallbackQuery, state: FSMContext):
   await query.answer()
   metod_find_user = await db.get_user_metod(query.from_user.id)

#    0 - 1 üü† 
# 1 - 30 üü¢ 
# 30 - nüü°
   arr_metod = {"M":"–ú–µ–∂–¥ –±–∏—Ä–∂–µ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è","V":"–í–Ω—É—Ç—Ä–∏ –±–∏—Ä–∂–µ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"}
   await query.message.edit_text(f"‚öñÔ∏è –í–∞—à —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ —Å–≤—è–∑–æ–∫ - <b>{arr_metod[metod_find_user]}</b>\n\n<b>üì• –ú–µ–∂–¥ –±–∏—Ä–∂–µ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è</b> - —Ç–æ–≥–¥–∞  –≤ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫—Ä–∏–ø—Ç–æ-—Å–≤—è–∑–∫–∏ <b><u>–º–µ–∂–¥—É</u></b> –±–∏—Ä–∂\n\n<b>üì§ –í–Ω—É—Ç—Ä–∏ –±–∏—Ä–∂–µ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è</b> - —Ç–æ–≥–¥–∞ –≤ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫—Ä–∏–ø—Ç–æ-—Å–≤—è–∑–∫–∏ <b><u>–≤—É–Ω—Ç—Ä–∏</u></b> –±–∏—Ä–∂–∏ –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–±–µ—Ä–∏—Ç–µ",reply_markup=await change_metod(query.from_user.id))



   
@dp.callback_query_handler(text_contains="arjange",state="*")
async def add_otvet(query: CallbackQuery, state: FSMContext):
   await query.answer()
   await db.change_metod(query.from_user.id)
   metod_find_user = await db.get_user_metod(query.from_user.id)

#    0 - 1 üü† 
# 1 - 30 üü¢ 
# 30 - nüü°
   arr_metod = {"M":"–ú–µ–∂–¥ –±–∏—Ä–∂–µ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è","V":"–í–Ω—É—Ç—Ä–∏ –±–∏—Ä–∂–µ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"}
   await query.message.edit_text(f"‚öñÔ∏è –í–∞—à —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ —Å–≤—è–∑–æ–∫ - <b>{arr_metod[metod_find_user]}</b>\n\n<b>üì• –ú–µ–∂–¥ –±–∏—Ä–∂–µ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è</b> - —Ç–æ–≥–¥–∞  –≤ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫—Ä–∏–ø—Ç–æ-—Å–≤—è–∑–∫–∏ <b><u>–º–µ–∂–¥—É</u></b> –±–∏—Ä–∂\n\n<b>üì§ –í–Ω—É—Ç—Ä–∏ –±–∏—Ä–∂–µ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è</b> - —Ç–æ–≥–¥–∞ –≤ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫—Ä–∏–ø—Ç–æ-—Å–≤—è–∑–∫–∏ <b><u>–≤—É–Ω—Ç—Ä–∏</u></b> –±–∏—Ä–∂–∏ –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–±–µ—Ä–∏—Ç–µ",reply_markup=await change_metod(query.from_user.id))



   
@dp.callback_query_handler(text_contains="black_spisok",state="*")
async def add_otvet(query: CallbackQuery, state: FSMContext):
   await query.message.edit_text("üíæ <b>–í—ã–±–∏—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>",reply_markup=await get_menu_black())

@dp.callback_query_handler(text_contains="tokenban",state="*")
async def add_otvet(query: CallbackQuery, state: FSMContext):
   await query.message.edit_text("<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ —Å –¥–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º —É –≤–∞—Å –Ω–µ –±—É–¥–µ—Ç –∫—Ä–∏–ø—Ç–æ —Å–≤—è–∑–æ–∫</b>")
   await state.set_state("addban_token")


@dp.message_handler(state="addban_token")
async def start(msg : types.Message, state: FSMContext):
   try:
      await db.add_ban_token(msg.from_user.id,msg.text)
      await msg.answer(f"–¢–æ–∫–µ–Ω : <code>{msg.text.upper()}</code> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚úÖ")
   except Exception as E:
      print(E)


@dp.callback_query_handler(text_contains="anban",state="*")
async def add_otvet(query: CallbackQuery, state: FSMContext):
   await query.message.edit_text("üìç –í—ã–±–µ—Ä–∏—Ç–µ <b>—Ç–æ–∫–µ–Ω</b> , –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —Å —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",reply_markup= await get_ban_token(query.from_user.id))


@dp.callback_query_handler(text_contains="unban",state="*")
async def add_otvet(query: CallbackQuery, state: FSMContext):
   await query.answer()
   name_token = query.data.split(":")[1]
   await db.return_token(query.from_user.id , name_token)
   await query.message.edit_reply_markup(reply_markup=await get_ban_token(query.from_user.id))
   await query.message.answer(f"–¢–æ–∫–µ–Ω <code>{name_token}</code> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ ‚úÖ")
